@page "/"
@using Docs.Components.Layout
@inject  NavigationManager NavigationManager
@inject DocsService DocsService
@inject PersistentComponentState ApplicationState
@implements IDisposable 
<PageTitle>Docs</PageTitle>

<SectionContent SectionId="@MainLayout.TopBarSectionRight">
    <MudButton OnClick="AddDoc" Variant="Variant.Filled"Color="Color.Primary">Dodaj</MudButton>
</SectionContent>

@if (docs is null || !docs.Any())
{
    <p>Loading</p>
}
else
{
    <MudDataGrid Items="@docs">
        <Columns>
            <PropertyColumn Property="x => x.Title" Title="Dokument"/>
        </Columns>
    </MudDataGrid>
}

@code
{
    List<Doc>? docs;
    PersistingComponentStateSubscription stateSubscription;

    protected override async Task OnInitializedAsync()
    {
        stateSubscription = ApplicationState.RegisterOnPersisting(PersistData);
        if (!ApplicationState.TryTakeFromJson<List<Doc>?>("Docs", out var restored))
        {
            docs = (await DocsService.GetAllDocs()).data;
        }
        else
        {
            docs = restored!;
        }
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson("Docs", docs);
        return Task.CompletedTask;
    }

    private void AddDoc()
    {
        NavigationManager.NavigateTo("/add-doc");
    }


    public void Dispose()
    {
    }
}