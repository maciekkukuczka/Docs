@namespace Mac.Modules.Tags
@* @typeparam T where T : BaseModel, new() *@

<MudPaper Outlined="true" Class="pa-5 mb-5">
    <PageHeaderComp Name="@Name"/>
    @if (Tags is null or { Count: <= 0 })
    {
        <NoDataComp/>
    }
    else
    {
        <MudChipSet Disabled="!IsEdited" T="string" SelectedValues="@selectedItems" SelectionMode="SelectionMode.MultiSelection" CheckMark="true"
                    Variant="Variant.Filled" Color="Color.Surface" CheckedIcon="@Icons.Material.Filled.Check"
                    SelectedValuesChanged="@((tags) => OnSelectedTagChanges(tags))">
            
            @foreach (var item in Tags)
            {
                <MudChip Text="@item.Name" Variant="Variant.Filled" Value="item.Name"
                         Selected="@UserTags.Any(x=>x.Name==item.Name)"
                         Style="@($"background-color:{item.Color};")"/>
            }

        </MudChipSet>
    }
    @* <MudText>You selected @string.Join(", ", selectedItems.OrderBy(x => x))</MudText> *@
</MudPaper>

@code {
    [Parameter] public TagVM Model { get; set; } = new();
    [Parameter] public bool IsEdited { get; set; }

    [Parameter, EditorRequired] public HashSet<TagVM>? Tags { get; set; } = [];
    [Parameter] public HashSet<TagVM>? UserTags { get; set; } = [];
    [Parameter] public EventCallback<IReadOnlyCollection<string>> OnSelectedTags { get; set; }


    // [Parameter, EditorRequired] public RenderFragment<T> Content { get; set; }
    [Parameter] public string? Name { get; set; }

    IReadOnlyCollection<string>? selectedItems = [];

    async Task OnSelectedTagChanges(IReadOnlyCollection<string> selectedTags)
    {
        selectedItems = selectedTags;
        await OnSelectedTags.InvokeAsync(selectedTags);
    }

}