@namespace Docs.Modules.Tags

@page "/tags"
@inject TagsService TagsService
@inject  ISnackbar Snackbar 

<MidiCrudComp Name="Tagi" T="TagVM" Model="tag" Items="tags"
          OnSubmit="async x => await Submit(x)" OnEditItem="async x => await Edit(x)" OnRemoveItem="async x => await Delete(x)">
    @* <CascadingValue TValue="RenderFragment" > *@
    <EditFormContent>
        <MudElement HtmlTag="div" Class="mb-5" Style="width: 100%;">
            <MudStack Row StretchItems="StretchItems.End">
                <MudTextField Label="Nazwa" @bind-Value="tag.Name" For="@(() => tag.Name)" Class="flex-none"/>
                <MudTextField Label="Kolor" @bind-Value="tag.Color" Class="flex-none"/>
                <MudTextField Label="Opis" @bind-Value="tag.Description"/>
            </MudStack>
        </MudElement>
    </EditFormContent>

    @* ITEMS LIST *@
    <ItemTemplate>
        <MudText Inline="true">@context.Name</MudText>
    </ItemTemplate>
    @* </CascadingValue> *@

</MidiCrudComp>

@code {
    bool isEdited;
    TagVM tag = new();
    HashSet<TagVM> tags = [];


    protected override async Task OnInitializedAsync()
    {
        await GetTasks();
    }


    async Task Submit(TagVM? tagVm)
    {
        Result result;
        result = isEdited ? await TagsService.UpdateTag(tagVm) : await TagsService.AddTag(tagVm);
        _ = Snackbar.Add(result.Message, result.Success ? Severity.Success : Severity.Error);
        tag = new();
        await GetTasks();
    }


    async Task Edit((TagVM tagVm,bool isEdited)tuple)
    {
        tag = tuple.tagVm;
        isEdited = tuple.isEdited;
    }

    async Task Delete(TagVM tag)
    {
        await ShowMessage(await TagsService.DeleteTag(tag));
        await GetTasks();
    }


    async Task ShowMessage(Result result) => _ = Snackbar.Add(result.Message, result.Success ? Severity.Success : Severity.Error);
    async Task GetTasks() => tags = (await TagsService.GetTags([x => x.Docs])).Data;
}