@namespace Docs.Modules.Subjects

@* @inject SubjectService SubjectService *@
@inject SubjectVMService SubjectService
@* @inject DocsService DocsService *@
@* @inject AppState AppState *@
@inject PersistentComponentState PersistantComponentState
@implements IDisposable

<MudGrid>
    <MudItem xs="12">

        <MudPaper Outlined="true" Class="pa-5">
            @* <h3>Tematy</h3> *@
            <MudStack Row="true">
                @foreach (var subject in subjects)
                {
                    <MudButton OnClick="@(() => SelectSubject(subject))" Variant="Variant.Filled" Size="Size.Small"
                               Color="selectedSubject == subject ? Color.Primary : Color.Inherit">
                        @subject.Name
                    </MudButton>
                }
            </MudStack>
        </MudPaper>
    </MudItem>
</MudGrid>

@* ReSharper disable once InconsistentNaming *@
@* ReSharper disable once InconsistentNaming *@
@code {

    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; }

    // [Parameter] public EventCallback<Subject> OnSubjectSelected { get; set; }
    [Parameter] public EventCallback<SubjectVM> OnSubjectSelected { get; set; }

    // Subject selectedSubject;
    SubjectVM selectedSubject;

    // HashSet<Subject> subjects = [];
    HashSet<SubjectVM> subjects = [];
    PersistingComponentStateSubscription subscription;


    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthStateTask).User.Identity is { IsAuthenticated: true } ? (await AuthStateTask).User.Identity.Name : string.Empty;

        subscription = PersistantComponentState.RegisterOnPersisting(() =>
        {
            PersistantComponentState.PersistAsJson("SubjectsInComp", subjects);
            return Task.CompletedTask;
        });

        subjects = PersistantComponentState.TryTakeFromJson<HashSet<SubjectVM>>("SubjectsInComp", out var restored)
            ? restored
            : (await SubjectService.GetSubjects(user)).Data;

        if (subjects != null) selectedSubject = subjects.FirstOrDefault();
        await OnSubjectSelected.InvokeAsync(selectedSubject);
        /*
        try
        var sw = Stopwatch.StartNew();
        {
            if (PersistantComponentState.TryTakeFromJson<HashSet<SubjectVM>>("SubjectsInComp", out var restored))
            {
                subjects = restored;
                Log.Error("RESTORED (SubjectComp)");
            }
            else
            {
                subjects = (await SubjectService.GetSubjects(user)).data;
                Log.Error("DB (SubjectComp)");
            }
        }
        finally
        {
            sw.Stop();
            Log.Warning($"POMIAR KOMPONENT TEMATÓW: {sw.ElapsedMilliseconds} ms");
        }
    */
    }

    // async Task SelectSubject(Subject? subject)
    async Task SelectSubject(SubjectVM? subject)
    {
        if (subject != null) selectedSubject = subject;
        await OnSubjectSelected.InvokeAsync(selectedSubject);

        /*await  InvokeAsync(() =>
          {
              AppState.SetRecentSubjectId(subjectId);
              StateHasChanged();
          });*/
    }

    public void Dispose()
    {
        subscription.Dispose();
        AuthStateTask.Dispose();
    }

}