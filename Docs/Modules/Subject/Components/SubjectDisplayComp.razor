@namespace Docs.Modules.Subjects.Components

@inject SubjectVMService SubjectService
@inject AppState AppState
@inject PersistentComponentState PersistantComponentState
@implements IDisposable

@if (Subjects is null||Subjects.Count==0)
{
    <NoDataComp/>
}
else
{
    <MudGrid>
        <MudItem xs="12">

            <MudPaper Outlined="true" Class="pa-5">
                @* <h3>Tematy</h3> *@
                <MudStack Row="true">
                    @foreach (var subject in Subjects)
                    {
                        <MudButton OnClick="@(() => SelectSubject(subject))" Variant="Variant.Filled" Size="Size.Small"
                                   Color="selectedSubject == subject ? Color.Primary : Color.Inherit">
                            @subject.Name
                        </MudButton>
                    }
                </MudStack>
            </MudPaper>
        </MudItem>
    </MudGrid>
}


@code {

    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; }
    [Parameter] public EventCallback<SubjectVM> OnSubjectSelected { get; set; }
    [Parameter] public HashSet<SubjectVM> Subjects { get; set; }
    PersistingComponentStateSubscription subscription;
    SubjectVM selectedSubject;


    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthStateTask).User.Identity is { IsAuthenticated: true } ? (await AuthStateTask).User.Identity.Name : string.Empty;

        subscription = PersistantComponentState.RegisterOnPersisting(() =>
        {
            PersistantComponentState.PersistAsJson("SubjectsInComp", Subjects);
            return Task.CompletedTask;
        });


        Subjects = PersistantComponentState.TryTakeFromJson<HashSet<SubjectVM>>("SubjectsInComp", out var restored)
            ? restored
            : (await SubjectService.GetSubjects(user)).Data;

        if (selectedSubject is null&&(Subjects is not null&&Subjects.Count>0))
        {
            selectedSubject = Subjects.FirstOrDefault();
            await SelectSubject();
        }

        /*
        try
        var sw = Stopwatch.StartNew();
        {
            if (PersistantComponentState.TryTakeFromJson<HashSet<SubjectVM>>("SubjectsInComp", out var restored))
            {
                subjects = restored;
                Log.Error("RESTORED (SubjectComp)");
            }
            else
            {
                subjects = (await SubjectService.GetSubjects(user)).data;
                Log.Error("DB (SubjectComp)");
            }
        }
        finally
        {
            sw.Stop();
            Log.Warning($"POMIAR KOMPONENT TEMATÓW: {sw.ElapsedMilliseconds} ms");
        }
    */
    }


    async Task SelectSubject(SubjectVM? subject = null)
    {
        if (subject != null) selectedSubject = subject;
        AppState.SelectedSubject=selectedSubject;
        await OnSubjectSelected.InvokeAsync(selectedSubject);

        /*await  InvokeAsync(() =>
          {
              AppState.SetRecentSubjectId(subjectId);
              StateHasChanged();
          });*/
    }

    public void Dispose()
    {
        subscription.Dispose();
        AuthStateTask.Dispose();
    }

}