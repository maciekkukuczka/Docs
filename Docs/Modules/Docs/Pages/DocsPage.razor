@page "/"
@inject  NavigationManager NavigationManager
@inject DocsService DocsService
@inject GenericService<Doc> GenericService
@inject PersistentComponentState ApplicationState
@inject AppState AppState
@inject ISnackbar Snackbar
@inject  IDialogService DialogService
@implements IDisposable
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]


<PageTitle>Docs</PageTitle>

<SectionContent SectionId="@MainLayout.TopBarSectionRight">
    <MudButton OnClick="AddDoc" Variant="Variant.Filled"Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add">Dodaj</MudButton>
</SectionContent>

<SubjectDisplayComp OnSubjectSelected="(subject)=>OnSubjectSelected(subject)"/>
@if (docs is null || !docs.Any())
{
    <p>Loading</p>
}
else
{
    <MudDataGrid @ref="dataGrid" Items="@docs">
        <Columns>
            <TemplateColumn >
                <CellTemplate >
                    @* @(docs.IndexOf(context.Item) + 1) *@
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Nazwa">
                <CellTemplate>
                    <MudLink Href="@($"/doc-details/{context.Item.Id}")" Underline="Underline.Always">@context.Item.Title</MudLink>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.ShortDescription" Title="Krótki opis"/>
            <TemplateColumn TItle="Tematy">
                <CellTemplate>
                    @foreach (var subject in context.Item.Subjects)
                    {
                        <span>@subject.Name</span>
                    }
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small" StartIcon="@Icons.Custom.Uncategorized.Radioactive"
                                   OnClick="@(() => Edit(context.Item))">
                            Edytuj
                        </MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" StartIcon="@Icons.Material.Filled.DeleteForever"
                                   OnClick="@(() => Remove(context.Item.Id))">
                            Usuń
                        </MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}

@code
{
    PersistingComponentStateSubscription stateSubscription;
    MudDataGrid<Doc> dataGrid;
    HashSet<Doc>? docs;
    // Subject? recentSubject;


    protected override async Task OnInitializedAsync()
    {
        /*AppState.OnChange += SubjectIdChanged;
        AppState.OnChange += StateHasChanged;*/

        stateSubscription = ApplicationState.RegisterOnPersisting(() =>
        {
            ApplicationState.PersistAsJson("Docs", docs);
            return Task.CompletedTask;
        });

        await GetDocs();
    }

    async Task OnSubjectSelected(Subject subject)
    {
        AppState.RecentSubject = subject;
        await GetDocs(subject.Id);
    }
    /*void SubjectIdChanged()
   {
    GetDocs();
   }*/

    async Task GetDocs(string? subjectId = "")
    {
        docs = !ApplicationState.TryTakeFromJson<HashSet<Doc>?>("Docs", out var restored) ? (await DocsService.GetDocBySubject(subjectId)).data : restored!;
        // docs = (await DocsService.GetDocBySubject(subjectId)).data ;
    }


    void AddDoc()
    {
        NavigationManager.NavigateTo("/add-doc");
    }

    void Edit(Doc contextItem)
    {
        AppState.DocToEdit = contextItem;
        NavigationManager.NavigateTo($"/edit-doc/{contextItem.Id}");
    }

    async Task Remove(string contextItemId)
    {
        bool? dialogResult = await DialogService.ShowMessageBox(
            "uwaga",
            "Czy na pewno skasować dokument?",
            yesText: "Skasuj!", cancelText: "Anuluj");

        var state = dialogResult == null ? "Canceled" : "Deleted!";
        if (state.Equals("Canceled")) return;
        var result = await DocsService.DeleteDoc(contextItemId);
        var snackbar = result.success ? Snackbar.Add(result.message, Severity.Warning) : Snackbar.Add(result.message, Severity.Error);
        docs = (await DocsService.GetAllDocs()).data.ToHashSet();
    }

    public void Dispose()
    {
        stateSubscription.Dispose();
        /*AppState.OnChange -= SubjectIdChanged;
        AppState.OnChange -= StateHasChanged;*/
    }
    /*private Task PersistData()
{
ApplicationState.PersistAsJson("Docs", docs);
return Task.CompletedTask;
}*/
}