@inject PersistentComponentState PersistentComponentState 
@inject GenericService<Subject> GenericService
@inject SubjectService SubjectService
@inject UserManager<ApplicationUser> UserManager
@inject ISnackbar Snackbar
@implements  IDisposable
@page "/subjects"
@attribute [Authorize]
@*
<SectionContent SectionId="MainLayout.TopBarSectionRight">
    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="AddSubject">Dodaj Temat</MudButton>
</SectionContent>
*@

<MudGrid>
    <MudItem xs="4">
        <h3>Tematy</h3>
        <MudPaper>
            <EditForm Model="@subject" OnValidSubmit="Submit">
                <DataAnnotationsValidator/>
                <MudTextField @bind-Value="subject.Name" Label="Tytuł" For="@(() => subject.Name)"/>
                <MudTextField @bind-Value="subject.Description" Label="Opis" For="@(() => subject.Name)" Lines="5"/>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">Dodaj Temat</MudButton>
            </EditForm>
        </MudPaper>
    </MudItem>

    @if (subjects is null || !subjects.Any())
    {
        <p>Brak danych...</p>
    }
    else
    {
        <MudItem xs="6">
            <MudDataGrid Items="subjects">
                <Columns>
                    <PropertyColumn Property="x => x.Name" Title="Tytuł"/>
                    <TemplateColumn Title="Dokumenty">
                        <CellTemplate>
                            @foreach (var doc in context.Item.Docs)
                            {
                                <span @key="doc.Id">@doc.Title</span>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn>
                        <CellTemplate>
                            <MudStack Row="true">
                                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Size="Size.Small" Color="Color.Warning" StartIcon="@Icons.Custom.Uncategorized.Radioactive"
                                           OnClick="(async () => await Edit(context.Item))">
                                    Edytuj
                                </MudButton>
                                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Usuń</MudButton>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>

                </Columns>
            </MudDataGrid>
        </MudItem>
    }
</MudGrid>

@code {
    [CascadingParameter] public Task<AuthenticationState>? AuthStateTask { get; set; }

    PersistingComponentStateSubscription stateSubscription;
    HashSet<Subject> subjects = [];
    Subject subject = new();
    string? currentUserId;
    string? currentUserName;

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = (await AuthStateTask).User.Identity.IsAuthenticated;
        currentUserName = isAuthenticated ? (await AuthStateTask).User.Identity.Name : string.Empty;

        if (!string.IsNullOrWhiteSpace(currentUserName))
        {
            currentUserId = (await UserManager.FindByNameAsync(currentUserName)).Id;
        }

        stateSubscription = PersistentComponentState.RegisterOnPersisting(() =>
        {
            PersistentComponentState.PersistAsJson("Subjects", subjects);
            return Task.CompletedTask;
        });

        subjects = PersistentComponentState.TryTakeFromJson<HashSet<Subject>>
            ("Subjects", out var restored)
            ? restored
            // : (await GenericService.GetAll()).data;
            : (await SubjectService.GetSubjects(currentUserName)).data;
    }

    async Task Submit(EditContext context)
    {
        var subject = (Subject)context.Model;
        subject.UserId = currentUserId;

        var result = await GenericService.Add(subject);

        if (result.success)
        {
            subjects = (await SubjectService.GetSubjects(currentUserName)).data;
            // subjects = (await GenericService.GetAll()).data;
            Snackbar.Add(result.message, Severity.Success);
        }
        else
        {
            Snackbar.Add(result.message, Severity.Error);
        }

        this.subject = new();
    }


    async Task Edit(Subject? contextSubject)
    {
        // TODO Add object to edit form
        
        if (contextSubject is not null)
        {
            var result = (await SubjectService.UpdateSubject(contextSubject));
            var snackbar = result.success
                ? Snackbar.Add(result.message, Severity.Success)
                : Snackbar.Add(result.message, Severity.Error);
        }
        
        
    }

    public void Dispose() => stateSubscription.Dispose();

}