@page "/add-doc"
@page "/edit-doc"
@page "/edit-doc/{id?}"
@* @inject DocsService DocsService *@
@inject DocsVMService DocsService
@* @inject GenericService<Doc> GenericService *@
@inject  NavigationManager NavigationManager
@inject AppState AppState
@inject ISnackbar Snackbar
@inject UserManager<ApplicationUser> UserManager;
@implements IDisposable
@attribute [Authorize]

<h3>AddEditDoc</h3>

@if (Doc is null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="@Doc" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator/>

        <MudGrid>
            <MudItem xs="12">
                <MudPaper>
                    <MudTextField Label="Tytuł" HelperText="Wymagane. Max 200 znaków"
                                  @bind-Value="@Doc.Title" For="@(() => Doc.Title)"/>

                    <MudTextField Label="Krótki opis" HelperText="Max 1000 znaków" Lines="5"
                                  @bind-Value="@Doc.ShortDescription" For="@(() => Doc.ShortDescription)"/>

                    <MudTextField Label="Krótki opis" HelperText="Max 5000 znaków" Lines="15"
                                  @bind-Value="@Doc.Description" For="@(() => Doc.Description)"/>

                </MudPaper>
            </MudItem>
            @*
            <SectionContent SectionId="@MainLayout.TopBarSectionRight">
            </SectionContent>
            *@
            <MudItem xs="12" Class="d-flex justify-end">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">Zapisz</MudButton>
            </MudItem>
        </MudGrid>
    </EditForm>
}

@code {
    [CascadingParameter] Task<AuthenticationState> AuthState { get; set; }

    [Parameter] public string? Id { get; set; }

    // Doc? Doc { get; set; }
    DocVM? Doc { get; set; }
    string userId;


    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;

        var isLogged = (await AuthState).User.Identity.IsAuthenticated;
        var user = isLogged ? (await AuthState).User.Identity.Name : string.Empty;
        userId = (await UserManager.Users.FirstOrDefaultAsync(x => x.UserName == user)).Id;

        // Doc = AppState.DocToEdit ?? new Doc
        Doc = AppState.DocToEdit ?? new DocVM
        {
            // Subjects =new HashSet<Subject>{ AppState.RecentSubject}
            /*Path = new DocPath(),
            Categories = new List<Category>(),
            Links = new List<Link>(),
            Images = new List<Image>(),
            Notes = new List<Note>(),
            Tags = new List<Tag>()*/
        };
    }


    async Task OnValidSubmit(EditContext context)
    {
        // var submittedDoc = context.Model as Doc;
        var submittedDoc = context.Model as DocVM;
        // submittedDoc.Subjects.Add(AppState.RecentSubject??=new Subject
        submittedDoc.Subjects.Add(AppState.RecentSubject ??= new SubjectVM
        {
            Name = "Default",
            UserId = userId
        });
        Result result;
        if (string.IsNullOrWhiteSpace(Id))
        {
            // result = await GenericService.Add(submittedDoc);
            // result = await DocsService.AddDoc(submittedDoc);
            result = await DocsService.AddDoc(submittedDoc);
        }
        else
        {
            // result = await GenericService.Update(submittedDoc);
            result = await DocsService.UpdateDoc(submittedDoc);
            AppState.DocToEdit = null;
        }

        if (result.success)
        {
            NavigationManager.NavigateTo("/");
            Snackbar.Add(result.message, Severity.Success);
        }
        else
        {
            Snackbar.Add(result.message, Severity.Error);
        }
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        AppState.DocToEdit = null;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

}