@namespace Docs.Modules.Categories.Components

@inject  AppState AppState
@inject CategoriesVMService CategoriesService
@inject PersistentComponentState PersistantComponentState
@implements IDisposable

@if (SelectedCategories is null || AppState.SelectedSubject is null)
{
    <NoDataComp/>
}
else
{
    <MudGrid>
        <MudItem xs="12">
            <MudPaper >
                <MudTreeView T="string" Hover="true">
                    <MudTreeViewItem Text="Kategorie" Expanded="true">
                        @foreach (var category in SelectedCategories)
                        {
                            <MudTreeViewItem OnClick="@(async () => await OnCategorySelected.InvokeAsync(category))" Text="@category.Name" Expanded/>
                        }
                    </MudTreeViewItem>
                </MudTreeView>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code {

    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; }
    [Parameter] public EventCallback<CategoryVM> OnCategorySelected { get; set; }
    [Parameter] public HashSet<CategoryVM>? SelectedCategories { get; set; }
    [Parameter] public string? SelectedSubjectIId { get; set; }
    string _prevoiusSelectedSubjectId;

    CategoryVM selectedCategory;
    PersistingComponentStateSubscription subscription;


    protected override async Task OnInitializedAsync()
    {
        _prevoiusSelectedSubjectId = SelectedSubjectIId;
        // AppState.OnChange += StateHasChanged;
        // var user = (await AuthStateTask).User.Identity is { IsAuthenticated: true } ? (await AuthStateTask).User.Identity.Name : string.Empty;

        subscription = PersistantComponentState.RegisterOnPersisting(() =>
        {
            PersistantComponentState.PersistAsJson("CategoriesInComp", SelectedCategories);
            return Task.CompletedTask;
        });

        SelectedCategories = PersistantComponentState.TryTakeFromJson<HashSet<CategoryVM>>("CategoriesInComp", out var restored)
            ? restored
            : await GetCategories();
    }

    
    protected override async Task OnParametersSetAsync()
    {
        if (SelectedSubjectIId != _prevoiusSelectedSubjectId) SelectedCategories = await GetCategories();
    }


    async Task<HashSet<CategoryVM>?> GetCategories()
    {
        return (await CategoriesService.GetCategoriesBySubject(SelectedSubjectIId)).Data;
        // return (await CategoriesService.GetCategoriesBySubject(AppState.SelectedSubject?.Id)).Data;
    }
    

    public void Dispose()
    {
        subscription.Dispose();
        AuthStateTask.Dispose();
        // AppState.OnChange -= StateHasChanged;
    }

}