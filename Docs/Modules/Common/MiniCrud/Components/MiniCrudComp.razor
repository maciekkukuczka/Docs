@typeparam T where T : LinkVM, new()
<MudGrid>
    <MudItem xs="6">
        <MudPaper Outlined="true" Class="pa-5">

            @if (Disabled)
            {
                foreach (var item in Items)
                {
                    <MudStack Row="true">
                        <MudLink Href="@item.Url" Typo="Typo.body2">@(string.IsNullOrWhiteSpace(item.Name) ? @item.Url : @item.Name)</MudLink>
                    </MudStack>
                }
            }
            else
            {
                <MudStack Row="false">

                    <EditForm Model="@model" OnValidSubmit="Submit">
                        <DataAnnotationsValidator/>
                        <MudStack Row="true">
                            <MudTextField Label="Url" @bind-Value="model.Url" For="() => model.Url"/>
                            <MudTextField Label="Nazwa" @bind-Value="model.Name"/>
                            <MudTextField Label="Opis" @bind-Value="model.Description"/>
                            <MudIconButton ButtonType="ButtonType.Submit" Icon="@(isEdit ? Icons.Material.Filled.AddTask : Icons.Material.Filled.Add)" Color="Color.Success"/>
                        </MudStack>
                    </EditForm>

                    @if (Items is null)
                    {
                        <NoDataComp/>
                    }
                    else
                    {
                        foreach (var item in Items)
                        {
                            <MudStack Row="true" Justify="Justify.SpaceBetween">
                                <MudLink Href="@item.Url" Typo="Typo.body1">@(string.IsNullOrWhiteSpace(item.Name) ? @item.Url : @item.Name)</MudLink>
                                <MudText >@item.Description</MudText>
                                <div>
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" OnClick="() => Edit(item)"></MudIconButton>
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="async () => await OnRemoveItem.InvokeAsync(item)"></MudIconButton>
                                </div>
                            </MudStack>
                        }
                    }
                </MudStack>
            }
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    [Parameter] public EventCallback<T> OnAddItem { get; set; }
    [Parameter] public EventCallback<T> OnRemoveItem { get; set; }
    [Parameter] public HashSet<T> Items { get; set; }

    T model = new();
    [Parameter] public bool Disabled { get; set; }
    bool isEdit;


    async Task Submit(EditContext context)
    {
        var item = (context.Model as T);
        await OnAddItem.InvokeAsync(item);
        model = new();
        isEdit = false;
    }

    void Edit(T item)
    {
        isEdit = true;
        model = item;
    }

}