@namespace Mac.Modules.Crud
@typeparam T where T : class, new()

@if (EditMode)
{
    @* EDIT *@
    <MudPaper Outlined="true" Class="pa-5">
        <PageHeaderComp Name="@Name"/>
        @HeaderContent
        <MudStack Row="false">

            <EditForm Model="@Model" OnValidSubmit="Submit">
                <DataAnnotationsValidator/>
                <MudStack Row="true" Context="mud">
                    @EditFormContent
                    <MudIconButton ButtonType="ButtonType.Submit" Icon="@(isEdited ? Icons.Material.Filled.AddTask : Icons.Material.Filled.Add)" Color="Color.Success"/>
                </MudStack>
            </EditForm>

            @if (Items is not null)
            {
                foreach (var item in Items)
                {
                    <MudStack Row="true" Justify="Justify.SpaceBetween">

                        @NoEditedItemsTemplate(item)

                        <div>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" OnClick="() => Edit(item)"></MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="async () => await OnRemoveItem.InvokeAsync(item)"></MudIconButton>
                        </div>
                    </MudStack>
                }
            }

        </MudStack>
    </MudPaper>
}
else
{
    // NOT EDITED

    if (Items is not null && Items.Count > 0)
    {
        <MudPaper Outlined="true" Class="pa-5">
            <PageHeaderComp Name="@Name"/>
            @foreach (var item in Items)
            {
                <MudStack Row="true">
                    @NoEditedItemsTemplate(item)
                </MudStack>
            }
        </MudPaper>
    }
}


@code {
    [Parameter] public string Name { get; set; }
    [Parameter] public EventCallback<T> OnSubmit { get; set; }
    [Parameter] public EventCallback<T> OnEditItem { get; set; }
    [Parameter] public EventCallback<T> OnRemoveItem { get; set; }
    [Parameter, EditorRequired] public T Model { get; set; } = new();
    [Parameter, EditorRequired] public HashSet<T> Items { get; set; }
    [Parameter] public EventCallback<bool> Edited { get; set; }
    [Parameter, EditorRequired] public bool EditMode { get; set; }
    [Parameter] public RenderFragment? HeaderContent { get; set; }
    [Parameter] public RenderFragment? EditFormContent { get; set; }
    [Parameter] public RenderFragment<T>? NoEditedItemsTemplate { get; set; }

    bool isEdited;

    async Task Submit(EditContext context)
    {
        var item = (context.Model as T);
        await Edited.InvokeAsync(isEdited);
        await OnSubmit.InvokeAsync(item);
        isEdited = false;
    }

    async Task Edit(T item)
    {
        isEdited = true;
        await Edited.InvokeAsync(isEdited);
        await OnEditItem.InvokeAsync(item);
    }

}